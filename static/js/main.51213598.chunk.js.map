{"version":3,"sources":["components/Navbar/Navbar.tsx","components/HomePage/HomePage.tsx","api.ts","components/Loader/Loader.tsx","components/PersonLink/PersonLink.tsx","components/PeopleTable/PeopleTable.tsx","components/PeoplePage/PeoplePage.tsx","components/NotFoundPage/NotFoundPage.tsx","App.tsx","index.tsx"],"names":["Navbar","currentPage","useLocation","pathname","split","className","role","to","classNames","HomePage","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","PersonLink","person","name","sex","slug","PeopleTable","people","query","useParams","findPerson","personName","foundPerson","find","currentPerson","map","born","died","motherName","fatherName","mother","father","PeoplePage","useState","setPeople","isLoading","setIsLoading","didError","setDidError","useEffect","peopleFromServer","catch","finally","length","ErrorPage","App","path","element","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.51213598.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { Link, useLocation } from 'react-router-dom';\n\nexport const Navbar = () => {\n  const location = useLocation();\n  const currentPage = location.pathname.split('/')[1];\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <Link\n            to=\"/\"\n            className={classNames('navbar-item', {\n              'has-background-grey-lighter': !currentPage,\n            })}\n          >\n            Home\n          </Link>\n          <Link\n            to=\"/people\"\n            className={classNames('navbar-item', {\n              'has-background-grey-lighter': currentPage === 'people',\n            })}\n          >\n            People\n          </Link>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\nimport { Person } from '../../types';\n\ninterface PersonLinkProps {\n  person: Person;\n}\n\nexport const PersonLink: React.FC<PersonLinkProps> = ({\n  person: {\n    name,\n    sex,\n    slug,\n  },\n}) => (\n  <NavLink\n    to={`/people/${slug}`}\n    className={classNames({ 'has-text-danger': sex === 'f' })}\n  >\n    {name}\n  </NavLink>\n);\n","import classNames from 'classnames';\nimport { useParams } from 'react-router-dom';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink/PersonLink';\n\ninterface PeopleTableProps {\n  people: Person[];\n}\n\nexport const PeopleTable: React.FC<PeopleTableProps> = ({ people }) => {\n  const { query } = useParams();\n\n  const findPerson = (personName: string | null): string | JSX.Element => {\n    if (!personName) {\n      return '-';\n    }\n\n    const foundPerson = people.find(\n      (currentPerson: Person) => currentPerson.name === personName,\n    );\n\n    if (!foundPerson) {\n      return personName;\n    }\n\n    return (\n      <PersonLink person={foundPerson} />\n    );\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n      <tbody>\n        {people.map((person) => {\n          const {\n            sex, born, died, motherName, fatherName, slug,\n          } = person;\n          const mother = findPerson(motherName);\n          const father = findPerson(fatherName);\n\n          return (\n            <tr\n              key={slug}\n              className={classNames({\n                'has-background-warning': slug === query,\n              })}\n              data-cy=\"person\"\n            >\n              <td>\n                <PersonLink person={person} />\n              </td>\n              <td>{sex}</td>\n              <td>{born}</td>\n              <td>{died}</td>\n              <td>{mother}</td>\n              <td>{father}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { getPeople } from '../../api';\nimport { Person } from '../../types/Person';\nimport { Loader } from '../Loader';\nimport { PeopleTable } from '../PeopleTable/PeopleTable';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [didError, setDidError] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getPeople()\n      .then((peopleFromServer) => setPeople(peopleFromServer))\n      .catch(() => setDidError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoading && <Loader />}\n\n          {didError && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              Something went wrong\n            </p>\n          )}\n\n          {(!isLoading && !didError && !people.length) && (\n            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n          )}\n\n          {(!isLoading && !didError && people.length) && (\n            <PeopleTable people={people} />\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n","export const ErrorPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import './App.scss';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { Navbar } from './components/Navbar/Navbar';\nimport { HomePage } from './components/HomePage/HomePage';\nimport { PeoplePage } from './components/PeoplePage/PeoplePage';\nimport { ErrorPage } from './components/NotFoundPage/NotFoundPage';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <Navbar />\n    <main className=\"section\">\n      <div className=\"container\">\n        <Routes>\n          <Route path=\"/\" element={<HomePage />} />\n          <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"/people\" element={<PeoplePage />} />\n          <Route path=\"/people/:query\" element={<PeoplePage />} />\n          <Route path=\"*\" element={<ErrorPage />} />\n        </Routes>\n      </div>\n    </main>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}